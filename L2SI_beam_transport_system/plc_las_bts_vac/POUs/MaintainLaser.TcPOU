<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="MaintainLaser" Id="{46559531-d8de-49c9-8173-8613b0eb73e5}" SpecialFunc="None">
    <Declaration><![CDATA[(* The job of FB_LaserMaintainer is to keep the LASER_OK signal for each
transport tube on for as long as safely possible. This involves shutting down
lasers for tubes that do not meet system status checks and switching out
failed pumps when necessary *)
PROGRAM MaintainLaser
VAR_TEMP
	bSwitchboxStatusOk : BOOL;
	nIter : UINT;
	eTT : T_TransportTube;
	fbTT : REFERENCE TO FB_TransportTube;
	nPumpFailures : UINT;
END_VAR
VAR
	fbSBIonPumpFailure : FB_SwitchboxIonPumpFailure;
	fbSBRoughingOrTurboPumpFailure : FB_SwitchboxRoughingOrTurboPumpFailure;
END_VAR
VAR CONSTANT
	stExpValveStatus : ST_SBValveStatuses := (
		bGateValveOpen:= FALSE, 
		bVentValveOpen:= FALSE, 
		bORingPumpValveOpen:= TRUE, 
		bForelineValveOpen:= TRUE, 
		bSlowPumpValveOpen:= FALSE,
		bSBVentOpen:= FALSE,  
		bSBSlowVentOpen:= FALSE);
	
	stExpGaugeReadings : ST_SBGaugeReadings := (
		eDPPiraniState:= E_PressureState.ValidLo,
		fDPColdCathodeVal:= 1E-5,
		ePumpStationPirani1State:= E_PressureState.ValidLo,
		fPumpStationPirani2Val:= 1E-2,
		fPumpStationColdCathodeVal:= 1E-5
	);
	stGaugeReadingsOp : ST_SBGaugeReadingsOp := (
		eDPPiraniOp:= E_GaugeCompOp.STATE, 
		eDPColdCathodeOp:= E_GaugeCompOp._LTE, 
		ePumpStationPirani1Op:= E_GaugeCompOp.STATE, 
		ePumpStationPirani2Op:= E_GaugeCompOp._LTE, 
		ePumpStationColdCathodeOp:= E_GaugeCompOp._LTE);
		
	stExpTTStatus : ST_TransportTubeStatuses := (
		bIonPumpOn:= TRUE,
		bGateValveOpen:= TRUE,
		ePiraniState:= E_PressureState.ValidLo,
		fColdCathodeVal:= 1E-5);
	stTTOp : ST_TransportTubeOps := (
		ePiraniOp := E_GaugeCompOp.STATE,
		eColdCathodeOp := E_GaugeCompOp._LTE
	);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF GVL_MaintainLaser.i_bReset THEN
	GVL_MaintainLaser.q_bIonPumpFailure := FALSE;
	GVL_MaintainLaser.q_bRoughingPumpFailure := FALSE;
	GVL_MaintainLaser.q_bTurboPumpFailure := FALSE;
	
	fbSBIonPumpFailure(i_bExecute := FALSE, 
						i_bCancel := TRUE, 
						iq_sMessageBuffer := GVL_MaintainLaser.q_sMessage);
	fbSBIonPumpFailure.M_ResetError();
	
	fbSBRoughingOrTurboPumpFailure(i_bExecute := FALSE,
									i_bCancel := TRUE, 
									iq_sMessageBuffer := GVL_MaintainLaser.q_sMessage);
	fbSBRoughingOrTurboPumpFailure.M_ResetError();
	GVL_MaintainLaser.q_sMessage := 'No issues';
	
	GVL_MaintainLaser.q_bOperationInProgress := FALSE;
	GVL_MaintainLaser.i_bShutoff := FALSE;
	GVL_MaintainLaser.i_bReset := FALSE;
	GVL_MaintainLaser.q_bShutoffLatch := FALSE;
END_IF

// Look for pump failures. Once a pump failure is detected, latch the error until reset
GVL_MaintainLaser.q_bIonPumpFailure := GVL_MaintainLaser.q_bIonPumpFailure OR TRUE; // TODO, figure out how  check for ion pump failure
GVL_MaintainLaser.q_bTurboPumpFailure := GVL_MaintainLaser.q_bTurboPumpFailure OR GVL_BTS_VAC.fb_PP_PTM.iq_stPTM.eState = E_PumpState.pumpFAULT;
GVL_MaintainLaser.q_bRoughingPumpFailure := GVL_MaintainLaser.q_bRoughingPumpFailure OR GVL_BTS_VAC.fb_PP_PMF.q_stPump.eState = E_PumpState.pumpFAULT;

// Count the number of pump failures
nPumpFailures := BOOL_TO_UINT(GVL_MaintainLaser.q_bTurboPumpFailure) + BOOL_TO_UINT(GVL_MaintainLaser.q_bIonPumpFailure) + BOOL_TO_UINT(GVL_MaintainLaser.q_bRoughingPumpFailure);

// If a pump failure accured. Attempt to maintain vacuum as long as possible. If there are multiple pump failures then the system is not recoverable.
// Once a recovery operation has finished with an error or a shutdown laser signal, keep it from re-running until reset.
fbSBIonPumpFailure(i_bExecute := nPumpFailures = 1 
		AND GVL_MaintainLaser.q_bIonPumpFailure 
		AND NOT fbSBIonPumpFailure.q_bError 
		AND NOT fbSBIonPumpFailure.q_bShutdownLaser,
	i_bCancel := FALSE,
	iq_sMessageBuffer := GVL_MaintainLaser.q_sMessage);
fbSBRoughingOrTurboPumpFailure(i_bExecute := nPumpFailures = 1 
		AND (GVL_MaintainLaser.q_bRoughingPumpFailure OR GVL_MaintainLaser.q_bTurboPumpFailure) 
		AND NOT fbSBRoughingOrTurboPumpFailure.q_bError 
		AND NOT fbSBRoughingOrTurboPumpFailure.q_bShutdownLaser,
	i_bCancel := FALSE,
	iq_sMessageBuffer := GVL_MaintainLaser.q_sMessage);

GVL_MaintainLaser.q_bOperationInProgress := fbSBIonPumpFailure.q_bBusy OR fbSBRoughingOrTurboPumpFailure.q_bBusy;

(* Verify the switchbox is in an okay state for lasers. *)
bSwitchboxStatusOk :=
	nPumpFailures <= 1
	AND NOT fbSBIonPumpFailure.q_bShutdownLaser
	AND NOT fbSBRoughingOrTurboPumpFailure.q_bShutdownLaser;

(* Additional checks for switchbox for when there is not a pump failure. When a pump failure happens, these checks are no longer valid *)
IF nPumpFailures = 0 THEN
	bSwitchboxStatusOk := bSwitchboxStatusOk AND F_VerifySBValveStatuses(stExpStatus := stExpValveStatus, bEnforce := FALSE)
		AND F_VerifySBGaugeReadings(stExpReadings := stExpGaugeReadings, stReadingsOp := stGaugeReadingsOp);
END_IF

IF NOT bSwitchboxStatusOk THEN
	GVL_Maintainlaser.q_sMessage := 'Error detected in SwitchBox';
END_IF

GVL_MaintainLaser.q_bShutoffLatch := GVL_MaintainLaser.q_bShutoffLatch
	OR GVL_MaintainLaser.i_bShutoff
	OR NOT bSwitchboxStatusOk;
		
FOR nIter := 1 TO GVL_TransportTubes.NUM_TRANSPORT_TUBES DO
	eTT := GVL_TransportTubes.aTubes[nIter];
	fbTT REF= F_GetTransportTube(eTT);
	
	(* Disable Laser Ok signal if transport tube or switchbox is in bad state *)
	IF GVL_MaintainLaser.q_bShutoffLatch
	OR NOT F_VerifyTransportTubeStatuses(stExpStatus := stExpTTStatus,
		eTransportTube := eTT,
		stStatusOp := stTTOp, 
		bEnforce := FALSE)
	THEN // System status is not ok. Disable laser Ok signal
		fbTT.M_SetLaserOk(FALSE);
	END_IF
END_FOR
]]></ST>
    </Implementation>
    <LineIds Name="MaintainLaser">
      <LineId Id="466" Count="5" />
      <LineId Id="651" Count="1" />
      <LineId Id="472" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="653" Count="1" />
      <LineId Id="476" Count="0" />
      <LineId Id="650" Count="0" />
      <LineId Id="535" Count="1" />
      <LineId Id="591" Count="0" />
      <LineId Id="537" Count="0" />
      <LineId Id="705" Count="0" />
      <LineId Id="477" Count="12" />
      <LineId Id="597" Count="2" />
      <LineId Id="490" Count="2" />
      <LineId Id="594" Count="2" />
      <LineId Id="493" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="531" Count="1" />
      <LineId Id="498" Count="5" />
      <LineId Id="505" Count="3" />
      <LineId Id="510" Count="1" />
      <LineId Id="764" Count="0" />
      <LineId Id="763" Count="0" />
      <LineId Id="768" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="707" Count="0" />
      <LineId Id="706" Count="0" />
      <LineId Id="708" Count="1" />
      <LineId Id="512" Count="6" />
      <LineId Id="520" Count="6" />
      <LineId Id="5" Count="0" />
      <LineId Id="530" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>