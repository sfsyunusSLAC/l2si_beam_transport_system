<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.17">
  <POU Name="Operate" Id="{91059565-fdb8-48bb-bcd8-7014a23288b3}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Operate
VAR
	eCurrOp : E_Op; // The currently running operation
	eCurrTransportTube : T_TransportTube; // The current transport tube being operated on (if operation involves transport tube)
	
	(* Operations *)
	fbPumpTransportTube : FB_PumpTransportTube;
	fbVentTransportTube : FB_VentTransportTube;
	//fbOpenTransportTube : FB_OpenTransportTube;
	fbLaseron : FB_LaserOn;
	fbPumpSwitchbox : FB_PumpSwitchbox;
	fbSlowPumpSwitchbox : FB_SlowPumpSwitchbox;
	fbVentPumpStation : FB_VentPumpStation;
	fbVentSwitchbox : FB_VentSwitchbox;
	fbSlowVentSwitchbox : FB_SlowVentSwitchbox;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Run operations, but don't start any new operations if another operation is still running *)

// If the maintain laser program is running an operation, prevent this program from running operations.
IF GVL_MaintainLaser.q_bOperationInProgress THEN
	GVL_Operation.i_bCancel := TRUE;
END_IF

// Only start new operations if the system is NOT busy with another operation!
IF NOT GVL_Operation.q_bBusy THEN
	eCurrOp := GVL_Operation.iq_eOperation;
	eCurrTransportTube := GVL_Operation.iq_eTransportTube;
END_IF

// Execute selected operation
CASE eCurrOp OF
E_Op.NONE: // No operation selected
	GVL_Operation.q_bBusy := FALSE;

E_Op.PTT: // Pump transport tube
	fbPumpTransportTube(
		i_bExecute := TRUE, 
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		i_eTransportTube := eCurrTransportTube,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);

E_Op.VTT: // Vent transport tube
	fbVentTransportTube(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		i_eTransportTube := eCurrTransportTube,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
	
(*
E_Op.OTT: // Open transport tube gate valve
	fbOpenTransportTube(
		i_bExecute := TRUE,
		i_bCancel := i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		i_eTransportTube := eCurrTransportTube,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
*)
	
E_Op.LTT: // Turn laser on for transport tube
	fbLaserOn(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		i_eTransporttube := eCurrTransportTube,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
	
E_Op.PSB: // Pump switchbox
	fbPumpSwitchbox(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
	
E_Op.SPSB: // Slow pump switchbox
	fbSlowPumpSwitchbox(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
	
E_Op.VPS: // Vent pump station
	fbVentPumpStation(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);

E_Op.VSB: // Vent switchbox
	fbVentSwitchbox(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
	
E_Op.SVSB: // Slow vent switchbox
	fbSlowVentSwitchbox(
		i_bExecute := TRUE,
		i_bCancel := GVL_Operation.i_bCancel,
		iq_sMessageBuffer := GVL_Operation.q_sMessage,
		q_bBusy => GVL_Operation.q_bBusy,
		q_bError => GVL_Operation.q_bError
	);
	
ELSE // Operator selected unimplemented operation
	GVL_Operation.q_sMessage := 'Unimplemented operation';
	GVL_Operation.q_bBusy := FALSE;
	GVL_Operation.q_bError := TRUE;
END_CASE

// If all operation have finished then set operation back to none
IF NOT GVL_Operation.q_bBusy THEN
	eCurrOp := E_Op.NONE;
END_IF

// Set output operation to whatever is ACTAULLY currently running
GVL_Operation.iq_eOperation := eCurrOp;
GVL_Operation.iq_eTransportTube := eCurrTransportTube;
GVL_Operation.i_bCancel := FALSE; // Reset cancel flag]]></ST>
    </Implementation>
    <LineIds Name="Operate">
      <LineId Id="6" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="145" Count="2" />
      <LineId Id="11" Count="107" />
      <LineId Id="5" Count="0" />
      <LineId Id="148" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>