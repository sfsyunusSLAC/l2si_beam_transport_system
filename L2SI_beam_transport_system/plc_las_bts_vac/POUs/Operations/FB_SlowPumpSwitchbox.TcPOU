<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.0">
  <POU Name="FB_SlowPumpSwitchbox" Id="{85c17bad-68a9-42d2-8800-44dcc39ac9f8}" SpecialFunc="None">
    <Declaration><![CDATA[(* Operation for pumping the switchbox *)
FUNCTION_BLOCK FB_SlowPumpSwitchbox EXTENDS FB_Operation
VAR CONSTANT
	(* Expected system states before operation starts*)
	stExpPumpStatus : ST_SBPumpStatuses := (
		bRoughingPumpOn:= FALSE, 
		bTurboPumpOn:= FALSE, 
		bIonPumpOn:= FALSE);
	
	stExpValveStatus : ST_SBValveStatuses := (
		bGateValveOpen:= FALSE, 
		bVentValveOpen:= FALSE, 
		bORingPumpValveOpen:= FALSE, 
		bForelineValveOpen:= FALSE, 
		bSlowPumpValveOpen:= FALSE,
		bSBVentOpen:= FALSE,  
		bSBSlowVentOpen:= FALSE);
	
	stExpGaugeReadings : ST_SBGaugeReadings := (
		eDPColdCathodeState:= E_PressureState.off,
		ePumpStationColdCathodeState:= E_PressureState.off
	);
	stGaugeReadingsOp : ST_SBGaugeReadingsOp := (
		eDPPiraniOp:= E_GaugeCompOp.ATM, 
		eDPColdCathodeOp:= E_GaugeCompOp.STATE, 
		ePumpStationPirani1Op:= E_GaugeCompOp.ATM, 
		ePumpStationPirani2Op:= E_GaugeCompOp.ATM, 
		ePumpStationColdCathodeOp:= E_GaugeCompOp.STATE);
		
	stExpTTStatus : ST_TransportTubeStatuses := (bGateValveOpen:= FALSE);
	stTTOp : ST_TransportTubeOps := (bIonPumpIgnore:= TRUE);
		
	(* Expected system states after operation finishes *)
	stFinExpPumpStatus : ST_SBPumpStatuses := (
		bRoughingPumpOn:= TRUE, 
		bTurboPumpOn:= FALSE, 
		bIonPumpOn:= TRUE);
	
	stFinExpValveStatus : ST_SBValveStatuses := (
		bGateValveOpen:= FALSE, 
		bVentValveOpen:= FALSE, 
		bORingPumpValveOpen:= TRUE, 
		bForelineValveOpen:= TRUE, 
		bSlowPumpValveOpen:= FALSE,
		bSBVentOpen:= FALSE,  
		bSBSlowVentOpen:= FALSE);
	
	stFinExpGaugeReadings : ST_SBGaugeReadings := (
		eDPPiraniState:= E_PressureState.ValidLo,
		fDPColdCathodeVal := 1E-5,
		ePumpStationPirani1State:= E_PressureState.ValidLo,
		ePumpStationPirani2State:= E_PressureState.ValidLo,
		fPumpStationColdCathodeVal := 1E-5
	);
	stFinGaugeReadingsOp : ST_SBGaugeReadingsOp := (
		eDPPiraniOp:= E_GaugeCompOp.STATE, 
		eDPColdCathodeOp:= E_GaugeCompOp._LTE, 
		ePumpStationPirani1Op:= E_GaugeCompOp.STATE, 
		ePumpStationPirani2Op:= E_GaugeCompOp.STATE, 
		ePumpStationColdCathodeOp:= E_GaugeCompOp._LTE);
		
	stFinExpTTStatus : ST_TransportTubeStatuses := (bGateValveOpen:= FALSE);
	stFinTTOp : ST_TransportTubeOps := (bIonPumpIgnore:= TRUE);
		
	(* Pressure constants *)
	TURBO_READY_PRESS : REAL := 1E-4; // Pressure at which to initiate turbo pump
	ION_READY_PRESS : REAL := 1E-5; // Pressure at which to initiate ion pump
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();

CASE nStep OF
E_OpStep.START: // System Status Check
	M_RunTimeoutTimer(STATUS_CHECK_TIMEOUT);
	IF F_VerifySBPumpStatuses(stExpStatus := stExpPumpStatus, bEnforce := TRUE)
		AND F_VerifySBValveStatuses(stExpStatus := stExpValveStatus, bEnforce := TRUE)
		AND F_VerifySBGaugeReadings(stExpReadings := stExpGaugeReadings, stReadingsOp := stGaugeReadingsOp)
		AND F_VerifyAllTransportTubeStatuses(stExpStatus := stExpTTStatus, 
			stStatusOp := stTTOp, 
			bEnforce := TRUE)
	THEN // System status check passed
		M_ResetTimeoutTimer();
		
		// Make sure pressure difference is low between switchbox and pumping station
		IF ABS(GVL_BTS_VAC.fb_DP_GPI.PG.rPRESS - GVL_BTS_VAC.fb_PP_GPI_1.PG.rPRESS) < 10 THEN
			nStep := E_OpStep.SPSB_OPEN_GATE_VALVE;
		ELSE
			M_FatalError();
		END_IF
	END_IF
	
E_OpStep.SPSB_OPEN_GATE_VALVE:  
	M_RunTimeoutTimer(VALVE_TIMEOUT);

	// Open gate valve
	GVL_BTS_VAC.fb_PP_VGC.M_Set_OPN_SW(TRUE);
	
	IF GVL_BTS_VAC.fb_PP_VGC.M_IsOpen() THEN
		M_ResetTimeoutTimer();		
		nStep := E_OpStep.SPSB_OPEN_PUMP_STATION_VALVES;
	END_IF
	
E_OpStep.SPSB_OPEN_PUMP_STATION_VALVES:
	M_RunTimeoutTimer(VALVE_TIMEOUT);
	
	// Open pumping station valves
	GVL_BTS_VAC.fb_PP_VRC_1.M_Set_OPN_SW(TRUE);
	GVL_BTS_VAC.fb_PP_VRC_3.M_Set_OPN_SW(TRUE);

	IF GVL_BTS_VAC.fb_PP_VRC_1.iq_stValve.eState = E_ValvePositionState.OPEN AND GVL_BTS_VAC.fb_PP_VRC_3.iq_stValve.eState = E_ValvePositionState.OPEN THEN
		M_ResetTimeoutTimer();
		nStep := E_OpStep.SPSB_ROUGH_CHAMBER;
	END_IF
	
E_OpStep.SPSB_ROUGH_CHAMBER: // Rough chamber
	M_RunTimeoutTimer(ROUGH_CHAMBER_TIMEOUT);
	
	// Turn on roughing (PMF) pump
	GVL_BTS_VAC.fb_PP_PMF.M_Run(TRUE);

	// Continue roughing until pressure is low enough to start turbo pump
	IF GVL_BTS_VAC.fb_PP_PMF.q_stPump.eState = E_PumpState.pumpRUNNING AND GVL_BTS_VAC.fb_DP_GPI.PG.rPRESS < TURBO_READY_PRESS THEN	
		M_ResetTimeoutTimer();
		nStep := E_OpStep.SPSB_OPEN_FORELINE_VALVE;
	END_IF
	
E_OpStep.SPSB_OPEN_FORELINE_VALVE:
	M_RunTimeoutTimer(VALVE_TIMEOUT);
	
	// Open foreline valve
	GVL_BTS_VAC.fb_PP_VRC_2.M_Set_OPN_SW(TRUE);
	
	IF GVL_BTS_VAC.fb_PP_VRC_2.iq_stValve.eState = E_ValvePositionState.OPEN THEN
		M_ResetTimeoutTImer();
		nStep := E_OpStep.SPSB_TURBO_CHAMBER;
	END_IF
	
E_OpStep.SPSB_TURBO_CHAMBER: // Turbo pump down to base pressure
	M_RunTimeoutTimer(TURBO_CHAMBER_TIMEOUT);
	
	// Start Turbo pump
	GVL_BTS_VAC.fb_PP_PTM.M_Run(TRUE);

	// Continue turbo pump until pressure is low enough to start ion pump
	IF GVL_BTS_VAC.fb_PP_PTM.iq_stPTM.eState = E_PumpState.pumpRUNNING AND GVL_BTS_VAC.fb_DP_GCC.IG.rPRESS < ION_READY_PRESS THEN	
		M_ResetTimeoutTimer();
		nStep := E_OpStep.SPSB_SWITCH_TO_ION_PUMP;
	END_IF
	
E_OpStep.SPSB_SWITCH_TO_ION_PUMP:
	M_RunTimeoutTimer(PUMP_TIMEOUT);
	
	// Switch to Ion pump
	GVL_BTS_VAC.fb_PP_PIP.M_Run(TRUE);
	
	IF GVL_BTS_VAC.fb_PP_PIP.i_xSP_DI THEN
		M_ResetTimeoutTimer();
		nStep := E_OpStep.SPSB_CLOSE_VALVES;
	END_IF
	
E_OpStep.SPSB_CLOSE_VALVES:
	M_RunTimeoutTimer(VALVE_TIMEOUT);
	
	// Close gate valve
	GVL_BTS_VAC.fb_PP_VGC.M_Set_OPN_SW(FALSE);
	GVL_BTS_VAC.fb_PP_VRC_3.M_Set_OPN_SW(FALSE);
	
	IF GVL_BTS_VAC.fb_PP_VGC.M_IsClosed() AND GVL_BTS_VAC.fb_PP_VRC_3.iq_stValve.eState = E_ValvePositionState.CLOSED THEN
		M_ResetTimeoutTimer();
		nStep := E_OpStep.SPSB_STOP_TURBO_PUMP;
	END_IF
	
E_OpStep.SPSB_STOP_TURBO_PUMP:
	M_RunTimeoutTimer(PUMP_TIMEOUT);
	
	// Turn off turbo pump
	GVL_BTS_VAC.fb_PP_PTM.M_Run(FALSE);
	
	IF GVL_BTS_VAC.fb_PP_PTM.iq_stPTM.eState = E_PumpState.pumpSTOPPED THEN
		M_ResetTimeoutTimer();
		nStep := E_OpStep.SPSB_FINISH;
	END_IF
	
E_OpStep.SPSB_FINISH: // System Status Check
	IF F_VerifySBPumpStatuses(stExpStatus := stFinExpPumpStatus, bEnforce := FALSE)
		AND F_VerifySBValveStatuses(stExpStatus := stFinExpValveStatus, bEnforce := FALSE)
		AND F_VerifySBGaugeReadings(stExpReadings := stFinExpGaugeReadings, stReadingsOp := stFinGaugeReadingsOp)
		AND F_VerifyAllTransportTubeStatuses(stExpStatus := stFinExpTTStatus, 
			stStatusOp := stFinTTOp, 
			bEnforce := FALSE)
	THEN
		M_Finish();
	ELSE
		M_FatalError();
	END_IF
END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_SlowPumpSwitchbox">
      <LineId Id="131" Count="1" />
      <LineId Id="63" Count="1" />
      <LineId Id="297" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="103" Count="1" />
      <LineId Id="251" Count="0" />
      <LineId Id="446" Count="0" />
      <LineId Id="451" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="574" Count="1" />
      <LineId Id="597" Count="0" />
      <LineId Id="577" Count="1" />
      <LineId Id="576" Count="0" />
      <LineId Id="162" Count="1" />
      <LineId Id="298" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="616" Count="0" />
      <LineId Id="614" Count="1" />
      <LineId Id="584" Count="1" />
      <LineId Id="588" Count="0" />
      <LineId Id="596" Count="0" />
      <LineId Id="587" Count="0" />
      <LineId Id="460" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="606" Count="0" />
      <LineId Id="617" Count="0" />
      <LineId Id="619" Count="1" />
      <LineId Id="618" Count="0" />
      <LineId Id="605" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="613" Count="0" />
      <LineId Id="601" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="462" Count="0" />
      <LineId Id="621" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="625" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="469" Count="0" />
      <LineId Id="144" Count="1" />
      <LineId Id="829" Count="7" />
      <LineId Id="840" Count="0" />
      <LineId Id="837" Count="1" />
      <LineId Id="192" Count="0" />
      <LineId Id="459" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="627" Count="0" />
      <LineId Id="629" Count="1" />
      <LineId Id="478" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="183" Count="1" />
      <LineId Id="636" Count="1" />
      <LineId Id="631" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="633" Count="1" />
      <LineId Id="642" Count="1" />
      <LineId Id="647" Count="0" />
      <LineId Id="644" Count="1" />
      <LineId Id="841" Count="1" />
      <LineId Id="650" Count="3" />
      <LineId Id="844" Count="0" />
      <LineId Id="654" Count="2" />
      <LineId Id="658" Count="0" />
      <LineId Id="657" Count="0" />
      <LineId Id="659" Count="8" />
      <LineId Id="669" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="431" Count="3" />
      <LineId Id="452" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="439" Count="0" />
      <LineId Id="670" Count="1" />
      <LineId Id="436" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="672" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>